- name: "Load the zfs kernel module"
  modprobe:
    name: zfs
    state: present

- name: "Check if a zpool with the target name already exists"
  shell: zpool status zroot
  register: zpool_check

- name: "Delete the existing zpool if it exists"
  command: zpool destroy -f zroot
  when: zpool_check.stdout is match("no such pool")

- name: "Create the 'zroot' zpool on the installation disk(s)"
  command: zpool create -f -d -o ashift=12
                              -o feature@allocation_classes=enabled
                              -o feature@async_destroy=enabled
                              -o feature@bookmarks=enabled
                              -o feature@embedded_data=enabled
                              -o feature@empty_bpobj=enabled
                              -o feature@enabled_txg=enabled
                              -o feature@extensible_dataset=enabled
                              -o feature@filesystem_limits=enabled
                              -o feature@hole_birth=enabled
                              -o feature@large_blocks=enabled
                              -o feature@lz4_compress=enabled
                              -o feature@project_quota=enabled
                              -o feature@resilver_defer=enabled
                              -o feature@spacemap_histogram=enabled
                              -o feature@spacemap_v2=enabled
                              -o feature@userobj_accounting=enabled
                              -o feature@zpool_checkpoint=enabled
                 zroot {{ pool_vdevs|quote }}
  vars:
    device_1_part_path: "/dev/disk/by-partlabel/{{ pool_creation_def_device_1_zfs_partlabel }}"
    device_2_string: " /dev/disk/by-partlabel/{{ pool_creation_def_device_2_zfs_partlabel }}"
    device_2_part_path: "{{ '' if pool_creation_def_device_2_zfs_partlabel == '' else device_2_string }}"
    pool_vdevs: "{{ device_1_part_path }}{{ device_2_part_path }}"

