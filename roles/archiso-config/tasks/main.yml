- name: "Start systemd-timesyncd to ensure system clock is accurate"
  service:
    name: systemd-timesyncd
    state: started

- name: "Sync pacman package database"
  pacman:
    update_cache: yes
    update_cache_extra_args: "--noconfirm"

- name: "Update mirror-server-list on the archiso live USB with fastest servers"
  block:
    - name: "Install reflector package"
      pacman:
        name: reflector
        state: present
    - name: "Check if the mirror-server-list backup copy already exists"
      stat:
        path: "{{ mirror_list_bkup }}"
      register: bkup_file
    - name: "Create backup copy of mirror-list, if it does not exist"
      copy:
        src: "{{ mirror_list }}"
        dest: "{{ mirror_list_bkup }}"
      when: bkup_file.stat.exists == false
    - name: "Find fastest servers, and replace the current archiso mirror-list"
      command: reflector --country 'United States'
                         --latest '200'
                         --protocol 'http'
                         --protocol 'https'
                         --sort 'rate'
                         --save {{ mirror_list|quote }}
      when: bkup_file.stat.exists == false
  vars:
    mirror_list: "/etc/pacman.d/mirrorlist"
    mirror_list_bkup: "{{ mirror_list }}_bkup"

- name: "Load the zfs kernel module"
  modprobe:
    name: zfs
    state: present

- name: "Unmount all zfs filesystems"
  command: zfs unmount -f -a

- name: "Delete the existing zpool if it exists"
  command: zpool destroy -f {{ archiso_config_def_zpool_name|quote }}
  register: cmd_result
  failed_when: cmd_result.rc >= 2

- name: "Unmount EFI boot partition from '/mnt/efi', if it exists"
  block:
    - name: "Check if '/mnt/efi' exists"
      stat:
        path: "/mnt/efi"
      register: mnt_efi_dir
    - name: "Unmount EFI boot partition from '/mnt/efi'"
      command: umount /mnt/efi
      when: mnt_efi_dir.stat.exists

- name: "Remove all subdirs/files from '/mnt', which will be used for chroot"
  block:
    - name: "Create list of all subdirs/files in '/mnt'"
      find:
        path: "/mnt"
        file_type: any
      register: mnt_content
    - name: "Remove all subdirs/files in '/mnt'"
      file:
        path: "{{ item_main.path }}"
        state: absent
      loop: "{{ mnt_content.files }}"
      loop_control:
        loop_var: item_main

