- name: "Start systemd-timesyncd to ensure system clock is accurate"
  service:
    name: systemd-timesyncd
    state: started

- name: "Sync pacman package database (with -Sy)"
  pacman:
    update_cache: yes
    update_cache_extra_args: "--noconfirm"

- name: "Check live USB mirror-server-list file by its modified-time"
  find:
    paths: "{{ archiso_config_var_mirrors_dir }}"
    patterns: '^mirrorlist$'
    use_regex: yes
    age: "{{ archiso_config_var_mirror_file_age }}"
  register: mirrors_found

- name: "Update live USB mirror-server-list if it is too old"
  block:
    - name: "Install reflector package"
      pacman:
        name: reflector
        state: present
    - name: "Create backup copy of mirror-list"
      copy:
        src: "{{ mirrors_file }}"
        dest: "{{ mirrors_bkup }}"
        force: yes
    - name: "Find fastest servers, and replace the current mirror-list"
      command: reflector --country 'United States'
                         --latest '200'
                         --protocol 'https'
                         --sort 'rate'
                         --save {{ mirrors_file|quote }}
    - name: "Sync pacman package database (with -Syy)"
      pacman:
        update_cache: yes
        force: yes
  vars:
    mirrors_file: "{{ archiso_config_var_mirrors_dir }}/{{ archiso_config_var_mirrors_file }}"
    mirrors_bkup: "{{ archiso_config_var_mirrors_dir }}/{{ archiso_config_var_mirrors_bkup }}"
  when: mirrors_found.matched > 0

- name: "Unmount EFI boot partition from '[chroot]/efi', if it is mounted"
  # note: this task allows playbook to be run multiple times, with idempotence
  mount:
    path: "{{ archiso_config_def_efi_chroot_dir }}"
    state: unmounted

- name: "Load the zfs kernel module"
  modprobe:
    name: zfs
    state: present

- name: "Check whether zpool exists on installation disk(s), and get pool name"
  command: zpool list -H -o name
  register: existing_zpool

- name: "Delete the existing zpool"
  command: zpool destroy -f {{ existing_zpool.stdout|quote }}
  when: existing_zpool.stdout != ""

- name: "Wipe installation disks"
  include_tasks: wipe_disk.yml
  loop: "{{ archiso_config_def_install_devices }}"
  loop_control:
    loop_var: device

